To open cheatsheet fold in vim  -  zo
tmux
    Prefix: Ctrl-b
    CLI
        tmux new [-s <SessionName>] [-t <ShareSessionName>]  -  New session
        tmux kill-ses -t <SessionName>  -  Kill session
        tmux ls  -  List sessions
        tmux a -t <SessionName>  -  Attach to session
    Sessions
        <Prefix> :new  -  New session
        <Prefix> $  -  Rename session
        <Prefix> d  -  Detach from session
        <Prefix> s  -  List/Switch sessions
        <Prefix> (  -  Prev session
        <Prefix> )  -  Next session
        <Prefix> L  -  Last (most recent) session
        <Prefix> +  -  New alt session in same group
    Windows
        <Prefix> c  -  New window
        <Prefix> ,  -  Rename window
        <Prefix> w  -  List/Switch windows
        <Prefix> &  -  Close window
        <Prefix> p  -  Previous window
        <Prefix> n  -  Next window
        <Prefix> <n>  -  Go to window n for n<10
        <Prefix> ' <n> <Enter>  -  Go to window n
        <Prefix> :swap-window [-s <Window>] -t <OtherWindow>  -  Swap windows
        <Prefix> :movew  -  Move window to unoccupied index
    Pane Navigation
        <Prefix> <ArrowKey>  -  Navigate panes
        <Prefix> ;  -  Last (most recent) pane
        <Prefix> q <n>  -  Display/switch panes
        <Prefix> z  -  Toggle zoom/fullscreen
    Pane Management
        <Prefix> "  -  Horizontal split
        <Prefix> %  -  Vertical split
        <Prefix> x  -  Close pane
        <Prefix> {  -  Move pane "left"
        <Prefix> }  -  Move pane "right"
        <Prefix> <Space>  -  Cycle pane layouts
        <Prefix> Ctrl-<ArrowKey>  -  Resize pane
    Pane/Window Conversion
        <Prefix> !  -  Convert pane to window
        <Prefix> :join-pane -t <Window> [-h|-v]  -  Move pane to window
    Copy Mode
        <Prefix> ]  -  Paste
        <Prefix> [  -  Start copy mode
        <Space>  -  Begin selection
        <Enter>  -  Copy selection and exit copy mode
        s  -  easymotion search
        S n  -  easymotion lines
    Copytk
        <Prefix> S  -  easycopy (2 easymotion-style actions)
        <Prefix> Q  -  quickcopy (copy based on patterns; use n to iterate batches)
        <Prefix> P  -  quickopen
    Nesting auto-keybinds (will send keys if ssh or another tmux)
        Alt-<Arrow>  -  Switch panes
        Alt-q - Alt-t  -  Switch panes 0-4
        Alt-0 - Alt-9  -  Switch windows
    Misc
        <Prefix> :setw synchronize-panes  -  Toggle duplicate input to all panes
        <Prefix> Ctrl-b  -  Send Ctrl-b to nested session
        <Prefix> Ctrl-n  -  Send Ctrl-b to second nested session
        <Prefix> Ctrl-m  -  Send Ctrl-b to third nested session
        <Prefix> F  -  tmux-fingers
vim
    <n><operator><motion>
    Operators  -  :help operator
        c   -  Change (delete and enter insert mode)
        d   -  Delete
        y   -  Yank
        g~  -  Swap case
        gu  -  To lowercase
        gU  -  To uppercase
        !   -  Run through external command
        =   -  Normalize indentation
        gq  -  Format as text
        gw  -  Format as text without moving cursor
        >   -  Shift indentation right
        <   -  Shift indentation left
        zf  -  Define fold
    Left-right Motions  -  :help left-right-motions
        hl - Basic movement
        0   -  Beginning of line
        ^   -  Beginning of line, non-blank
        g0  -  Beginning of screen line
        g^  -  Beginning of screen line, non-blank
        $   -  End of line
        g$  -  End of screen line
        gm  -  Middle of screen line
        g_  -  Down <n-1> lines and to end of line
        |   -  Go to column <n>
        f{char} - (find) Go to <n>th occurrence of {char} to the right
        F{char} - Same, to the left
        t{char} - (till) Same (to the right) but move cursor 1 less
        T{char} - Same, to the left
        ;   - Repeat last f F t or T
        ,   - Repeat last f F t or T in opposite direction
    Up-down Motions  -  :help up-down-motions
        j,k  -  Basic movement
        gj,gk -  Character-wise basic movement (allows operating on single line)
        +,-  -  Basic movement, and move cursor to first non-blank char
        G    -  Go to line <n> first non-blank character; default last line
        gg   -  Same as G but defaults to first line
        %    -  Go to <n> percent through the file
        go   -  Go to <n> byte in the file
    Word Motions  -  :help word-motions
        From vim help: 'words' are separated by whitespace or punctuation other than _, 'WORDS' are separated only by whitespace
        w   -  Move forward word
        W   -  Move forward WORD
        e,E -  Move forward to end of wOrD
        b   -  Move backward word
        B   -  Move backward WORD
        ge,gE - Move backward to end of wOrD
    Block Motions  -  :help object-motions
        (   -  Sentence backward
        )   -  Sentence forward
        {   -  Paragraph backward
        }   -  Paragraph forward
    Marks  -  :help mark-motions
        m{a-z} - Set single-file mark at cursor position (not a motion)
        m{A-Z} - Set across-file mark at cursor position (not a motion)
        `{mark} - Jump to mark
        '{mark} - Jump to mark linewise, positioning cursor at beginning of line
        :marks - List marks
        :delm {marks} - Delete marks
        :delm! - Delete all marks in buffer
        Types of marks:
            a-z  -  Valid within a buffer - can be set
            A-Z  -  Valid across buffers - can be set
            [,]  -  First,Last characters of previously yanked or changed text - can be set
            <,>  -  First,Last characters of selection in visual mode - can be set
            ^    -  Position last time insert mode was stopped
            .    -  Position of last change
            `    -  Position before jump (use as ``)
            '    -  Position before jump (use as '')
    Misc Motions
        g;  -  Previous change
        g,  -  Next change
        :changes - Print change list
        more @ :help various-motions
    Hop (EasyMotion)
        s   -  Bidirectional find on single character
        SS  -  Bidirectional find with 2 characters
    Misc
        .   -  Repeat last
    Cursor Movement
        0  -  Home/Beginning of line
        $  -  End/End of line
        ^  -  Beginning of line, first non-whitespace
        gg  -  Top
        G  -  Bottom
        <n> G  -  Go to line
        {  -  Prev block
        }  -  Next block
        b/e - Previous/Next word
    Screen Position
        zz  -  Center screen on cursor
        Ctrl-e  -  Move screen down
        Ctrl-y  -  Move screen up
    Yank/Paste
        " <n> y  -  Yank into register n
        " + y  -  Yank into system register (+)
        + <n> p  -  Paste from register n
    Undo
        u  -  Undo
        Ctrl-r  -  Redo
    Find/Replace
        / <Pattern>  -  Search forward
        / ?<Pattern>  -  Search backward
        n  -  Next forward search result
        N  -  Next backward search result
        :%s/<Pattern>/<Replacement>/g  -  Replace all
        :noh  -  Remove highlights
    Buffers
        :b <n>  -  Open buffer n (by name, name fragment, or id)
        :b <Tab>  -  Tab through list of buffers
        :ls  -  List buffers
        :bd [n]  -  Delete/unload buffer n, ! to force
        :unh[ide]  -  Open a window for each buffer
        :e  -  Re-edit (reload) current file
        :e!  -  Discard changes to current buffer and reload
        :e <file>  -  Edit file in new buffer
    Tab Pages
        :tabnew [file]  -  Open new tab page and optionally edit file
        Ctrl-PgUp  -  Previous tab page
        Ctrl-PgDn  -  Next tab page
        :tabs  -  List tab pages and contents
        :tab <cmd>  -  Execute window command to new tab page
        :tabm <n>  -  Move tab page to n
    Windows
        Ctrl-w <ArrowKey>  -  Move to window
        Ctrl-w q  -  Close window (same as :q)
        :qa[!]  -  Quit all buffers, windows, tab pages
        [n] Ctrl-w -|+|<|>  -  Resize window
        Ctrl-w s  -  Split horizontal
        Ctrl-w v  -  Split vertical
        :new  -  New window split horizontal
        :vne  -  New window split vertical
        Alt-z  -  Zoom/maximize current window
        Ctrl-w H  -  Move window to left full-height
        Ctrl-w J  -  Move window to bottom full-width
        Ctrl-w K  -  Move window to top full-width
        Ctrl-w L  -  Move window to right full-height
        Ctrl-w T  -  Move window to new tab page
        Ctrl-w r  -  Rotate windows right/down
        Ctrl-w R  -  Rotate windows left/up
        [n] Ctrl-w x  -  Swap (eXchange) window with window n
        :help window-moving
    Window Split Command Modifiers
        :vert <cmd>   -  Split vertically
        :lefta vert <cmd>  -  Open to left of cur window
        :rightb vert <cmd>  -  Open to right of cur window
        :abo <cmd>  -  Open above cur window
        :bel <cmd>  -  Open below cur window
        :to vert <cmd>  -  Open at left
        :bo vert <cmd>  -  Open at right
        :to <cmd>  -  Open at top
        :bo <cmd>  -  Open at bottom
    Indent
        >  -  Add indent level
        <  -  Remove indent level
        =  -  Auto-indent
        :set tabstop=4 shiftwidth=4 [no]expandtab  -  Use tabs/spaces
        :retab  -  Convert existing indents
    Folds
        zo  -  Open fold
        zO  -  Open folds recursively
        zc  -  Close fold
        zC  -  Close folds recursively
        za  -  Toggle fold
        zA  -  Toggle fold recursively
        zR  -  Open all folds
        zM  -  Close all folds
    Tags
        :tag <name>  -  Go to first matching tag
        Ctrl-]  -  Go to first matching tag under cursor
        :tselect <name>  -  List matching tags
        g ]  -  List matching tags under cursor
        :tjump <name>  -  List matching tags if multiple
        g Ctrl-]  -  List matching tags if multiple, under cursor
        :tags  -  List tag stack
        :pop  -  Pop tag stack
        Ctrl-t  -  Pop tag stack
        To regenerate tags: $ ctags -R
    LSP (Language Server)
        Space e  -  Show dialog with diagnostic messages for line
        [ d  -  Go to prev diagnostic
        ] d  -  Go to next diagnostic
        Ctrl-x Ctrl-o  -  Autocomplete popup
        g d  -  Jump to definition of term under cursor
        Space D - Jump to type definition of term under cursor
        g r  -  List references to the term under cursor
        g D  -  Jump to declaration of term under cursor
        K  -  Show info about term under cursor (twice jumps into window)
        Space r n  -  Rename term under cursor
        Ctrl-k  -  Show info on function signature for function under cursor (twice also works)
        Ctrl-t  -  Pop tag stack
        :pop  -  Pop tag stack
        :tags  -  List tag stack
    nvimTree
        Alt-n  -  Toggle tree
        g ?  -  Show bindings in tree
    Telescope (Fuzzy find)
        Space f f  -  Fuzzy find files
        Space f g  -  Live grep
        Space f b  -  List buffers
        Space f h  -  Search vim help tags
        Alf-f  -  Alias for fuzzy find files
    Codeium/Copilot
        Alt-\  -  Show completion
        Tab  -  Accept completion
        Alt-[  -  Prev completion
        Alt-]  -  Next completion
        :Copilot  -  Show all completions in popup
    ChatGPT
        Alt-g  -  Toggle ChatGPT dialog
        Ctrl-Enter  -  Send message (Alt-Enter in insert mode)
        Ctrl-n  -  New session
        Ctrl-o  -  Settings and sessions
        Tab  -  Switch window panes
        Ctrl-y  -  Yank last answer
        Ctrl-k  -  Yank code from last answer
        Ctrl-s  -  Edit system prompt
        Ctrl-d  -  Add "draft" message to prompt without sending to server
        Ctrl-r  -  Toggle role of message sent
    Aider
        Alt-a  -  Toggle Aider terminal window
        Space a s  -  Send selection to Aider
        Space a b  -  Send buffer to Aider
        Space a c  -  Aider command
        Space a +  -  Add current file to Aider
        Space a -  -  Drop current file from Aider
        Space a r  -  Add current file to Aider read-only
    Avante
        Alt-v  -  Toggle Avante sidebar
        Space a t  -  Toggle Avante sidebar
zsh
    <Esc> Ctrl-v  -  Edit command in editor
    fzf
        Ctrl-t  -  fzf filename search
        Ctrl-r  -  fzf history search
        Alt-c  -  fzf cd
        **<Tab>  -  fzf completion
PopShell
    Super-<ArrowKey>  -  Change selected window
    Super-<Enter>  -  Enter window management mode
    Super-<Esc>  -  Lock screen
    Super-q  -  Close window
    Super-m  -  Toggle maximize
    Super-t  -  Open terminal
    Super-o  -  Toggle split horizontal/vertical orientation
    Super-/  -  Window switch/launch dialog
    Super-,  -  Hide window (use launcher to reopen)
    Super-g  -  Toggle floating
    Super-<F11>  -  Toggle fullscreen
    Ctrl-Super-Up/Down  -  Switch workspaces
    Shift-Super-Up/Down  -  Move window across workspaces
    Shift-Super-Left/Right  -  Move window across monitors
    Ctrl-Shift-Super-Up/Down  -  Move window across monitors
    Window Management Mode
        <Enter>  -  Exit window management mode
        <Esc>  -  Cancel
        <ArrowKey>  -  Move window
        Ctrl-<ArrowKey>  -  Swap windows
        Shift-<ArrowKey>  -  Resize window
        o  -  Toggle split horizontal-vertical orientation
    Launcher
        t:  -  Execute command in terminal
        :  -  Execute a command in sh
        =  -  Calculate an equation
Chrome
    Ctrl-n  -  New window
    Ctrl-t  -  New tab
    Ctrl-<Tab> or Ctrl-<PgDn>  -  Next tab
    Ctrl-Shift-<Tab> or Ctrl-<PgUp>  -  Prev tab
    Ctrl-<n>  -  Go to tab n
    Ctrl-w  -  Close tab
    Ctrl-l  -  Select address bar
Mac
    Ctrl-Super-f  -  Terminal full-screen
taskwarrior
    Adding Tasks
        task add Example task due:tomorrow  -  Add a task due tomorrow.
        task add Example task project:Work  -  Add a task to the 'Work' project.
        task add Example task +urgent  -  Add a task with an 'urgent' tag.
        task add Example task pri:H  -  Add a high-priority task (priorities are H,M,L).
    Viewing Tasks
        task list
        task all
        task list project:Home  -  List all tasks in the 'Home' project.
        task list +urgent  -  List all tasks with the 'urgent' tag.
        task status:pending list  -  List only pending tasks.
        task due.before:tomorrow list  -  List tasks due before tomorrow.
        task 12 info  -  Show details of task 12.
    Removing Tasks
        task 2 delete  -  Delete task with ID 2.
    Task Statuses
        task 2 done  -  Mark task 2 as completed.
        task 2 start  -  Mark task 2 as started.
        task 2 stop  -  Mark task 2 as back to pending.
        All statuses: pending, completed, deleted, waiting, recurring
    Modifying Tasks
        task 2 modify due:eom  -  Change due date of task 2 to end of the month.
        task 2 modify -urgent  -  Remove the 'urgent' tag from task 2.
        task 2 modify project:Work  -  Move task 2 to the 'Work' project.
    Date Formats
        due:tomorrow  -  Due the next day.
        due:friday  -  Due on the next occurrence of Friday.
        due:2024-02-14  -  Due on a specific date.
        due:eom  -  Due at the end of the current month.
        due:eow  -  Due at the end of the current week.
    Reports
        task burndown.daily  -  Show daily burndown chart.
        task summary  -  Show a summary of tasks.
    Recurring Tasks
        task add Pay bills recur:monthly due:1st  -  Add a monthly recurring task due on the first of each month.
        task add Check emails recur:daily due:9am  -  Add a daily recurring task due at 9 AM every day.
        task add Write report recur:weekly due:Friday  -  Add a weekly recurring task due every Friday.
        task add Visit gym recur:biweekly due:Monday  -  Add a biweekly recurring task due every other Monday.
        task add Take medication recur:yearly due:2024-01-01  -  Add a yearly recurring task due on January 1st, 2024.
        task add Backup data recur:quarterly  -  Add a quarterly recurring task without a specific due date.
        task 10 modify recur:monthly due:15th  -  Change an existing recurring task to occur monthly, due on the 15th.
        task 10 modify recur:  -  Remove the recurring attribute from a task, making it a one-time task.
        task recurring  -  List all recurring tasks.
        task 10 done  -  Mark a single instance of a recurring task as completed. Taskwarrior automatically generates the next occurrence.
        task add Pay bills recur:monthly due:15th wait:due-7days  -  Add a monthly recurring task due on the 15th of each month, but only become active 7 days before the due date.
        task add Check monthly budget recur:monthly wait:3rd  -  Add a monthly recurring task that becomes active on the 3rd of each month.
        task add "Annual checkup" recur:yearly wait:september  -  Add a yearly recurring task that becomes active in September.
        task add recur:weekly +tech wait:friday due:wait+5d Backup octagon  -  Add a weekly recurring task that becomes active on Fridays, due 5 days after becoming active, with the 'tech' tag.
    Wait Date
        task add Example task wait:2024-01-05  -  Add a task that becomes active on a specific date.
    Annotations
        task 12 annotate Checked with client about requirements  -  Add an annotation.
        task 12 denotate 1  -  Delete annotation 1.
        task 12 denotate all  -  Delete all annotations.
        task 12 modify /Checked/Confirmed/  -  Replace text in the annotations.
        task list /client requirements/  -  Search for text in annotations.


